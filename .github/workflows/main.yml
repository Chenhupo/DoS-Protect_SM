name: Auto

on:
  push:
    paths-ignore:
    - LICENSE
    - README.md
  pull_request:
    paths-ignore:
    - LICENSE
    - README.md

  schedule:
    - cron: '30 03 01 */3 *'

jobs:
  Master:
    name: SM-${{ matrix.sm_version }} ${{ matrix.os_short }} build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          
        sm_version:
          - "1.8"
          - "1.9"
          - "1.10"
          - "1.11"
          - "1.12"
          
        include:
          - meta_version: "1.11"
            meta_branch: "1.11-dev"
            
          - sm_version: "1.12"
            sm_branch: master
            meta_version: "1.12"
            meta_branch: master
            
          - sm_version: "1.8"
            sm_branch: "1.8-dev"
            meta_version: "1.10"
            meta_branch: "1.10-dev"
            
          - sm_version: "1.9"
            sm_branch: "1.9-dev"
            
          - sm_version: "1.10"
            sm_branch: "1.10-dev"
            
          - sm_version: "1.11"
            sm_branch: "1.11-dev"
            
          - os: ubuntu-latest
            os_short: Linux
            
          - os: windows-latest
            os_short: Windows

    steps:
      - name: Initializing...
        shell: bash
        run: |
          echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV
          
      - name: Prepare clang (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y clang g++-multilib
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          
      - name: Add MSBuild to PATH (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.0.2
        
      - name: Prepare Visual Studio Code (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          :: See https://github.com/microsoft/vswhere/wiki/Find-VC
          for /f "usebackq delims=*" %%i in (`vswhere -latest -property installationPath`) do (
            call "%%i"\Common7\Tools\vsdevcmd.bat -arch=x86 -host_arch=x64
          )
          
          :: Loop over all environment variables and make them global.
          for /f "delims== tokens=1,2" %%a in ('set') do (
            echo>>"%GITHUB_ENV%" %%a=%%b
          )
          
      - name: Acquire SourceMod ${{ matrix.sm_version }}
        uses: actions/checkout@v2
        with:
          repository: alliedmodders/sourcemod
          ref: ${{ matrix.sm_branch }}
          path: sourcemod-${{ matrix.sm_version }}
          submodules: recursive
          
      - name: Acquire MetaMod:Source ${{ matrix.meta_version }}
        uses: actions/checkout@v2
        with:
          repository: alliedmodders/metamod-source
          ref: ${{ matrix.meta_branch }}
          path: metamod-${{ matrix.meta_version }}
          
      - name: Prepare Python
        uses: actions/setup-python@v2
        
      - name: Install AMBuild
        run: |
          python -m pip install wheel
          pip install git+https://github.com/alliedmodders/ambuild
          
      - name: Fetch supported SDKs
        shell: bash
        run: |
          git clone --mirror https://github.com/alliedmodders/hl2sdk hl2sdk-proxy-repo
          sdks=(csgo darkm l4d2 nucleardawn l4d tf2 dods hl2dm css episode1)
          for sdk in "${sdks[@]}"
          do
            git clone hl2sdk-proxy-repo -b $sdk hl2sdk-$sdk
          done
          
      - name: Secure own repository
        uses: actions/checkout@v2
        with:
          path: DoS-Protect
          
      - name: Compile all files
        working-directory: DoS-Protect
        run: |
          mkdir build
          cd build
          python ../configure.py --enable-optimize --sdks=present --sm-path="${{ github.workspace }}/sourcemod-${{ matrix.sm_version }}" --mms-path="${{ github.workspace }}/metamod-${{ matrix.meta_version }}"
          ambuild
          
      - name: Archive package (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v2
        with:
          name: dosprotect-sm${{ matrix.sm_version }}-linux-${{ env.GITHUB_SHA_SHORT }}
          path: DoS-Protect/build/package
          
      - name: Archive package (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v2
        with:
          name: dosprotect-sm${{ matrix.sm_version }}-win-${{ env.GITHUB_SHA_SHORT }}
          path: DoS-Protect/build/package
